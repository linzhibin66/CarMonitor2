package com.shinetech.mvp.DB.greendao;

import java.util.List;
import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;
import org.greenrobot.greendao.query.Query;
import org.greenrobot.greendao.query.QueryBuilder;

import com.shinetech.mvp.DB.bean.MaintenanceOrderProgressBean;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "MAINTENANCE_ORDER_PROGRESS_BEAN".
*/
public class MaintenanceOrderProgressBeanDao extends AbstractDao<MaintenanceOrderProgressBean, Void> {

    public static final String TABLENAME = "MAINTENANCE_ORDER_PROGRESS_BEAN";

    /**
     * Properties of entity MaintenanceOrderProgressBean.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property OrderNumber = new Property(0, String.class, "orderNumber", false, "ORDER_NUMBER");
        public final static Property ProgressStatus = new Property(1, byte.class, "progressStatus", false, "PROGRESS_STATUS");
        public final static Property Time = new Property(2, String.class, "time", false, "TIME");
    }

    private Query<MaintenanceOrderProgressBean> maintenanceOrderInfoBean_MaintenanceOrderProgresBeenQuery;

    public MaintenanceOrderProgressBeanDao(DaoConfig config) {
        super(config);
    }
    
    public MaintenanceOrderProgressBeanDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"MAINTENANCE_ORDER_PROGRESS_BEAN\" (" + //
                "\"ORDER_NUMBER\" TEXT NOT NULL ," + // 0: orderNumber
                "\"PROGRESS_STATUS\" INTEGER NOT NULL ," + // 1: progressStatus
                "\"TIME\" TEXT);"); // 2: time
        // Add Indexes
        db.execSQL("CREATE UNIQUE INDEX " + constraint + "IDX_MAINTENANCE_ORDER_PROGRESS_BEAN_TIME_DESC ON \"MAINTENANCE_ORDER_PROGRESS_BEAN\"" +
                " (\"TIME\" DESC);");
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"MAINTENANCE_ORDER_PROGRESS_BEAN\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, MaintenanceOrderProgressBean entity) {
        stmt.clearBindings();
        stmt.bindString(1, entity.getOrderNumber());
        stmt.bindLong(2, entity.getProgressStatus());
 
        String time = entity.getTime();
        if (time != null) {
            stmt.bindString(3, time);
        }
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, MaintenanceOrderProgressBean entity) {
        stmt.clearBindings();
        stmt.bindString(1, entity.getOrderNumber());
        stmt.bindLong(2, entity.getProgressStatus());
 
        String time = entity.getTime();
        if (time != null) {
            stmt.bindString(3, time);
        }
    }

    @Override
    public Void readKey(Cursor cursor, int offset) {
        return null;
    }    

    @Override
    public MaintenanceOrderProgressBean readEntity(Cursor cursor, int offset) {
        MaintenanceOrderProgressBean entity = new MaintenanceOrderProgressBean( //
            cursor.getString(offset + 0), // orderNumber
            (byte) cursor.getShort(offset + 1), // progressStatus
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2) // time
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, MaintenanceOrderProgressBean entity, int offset) {
        entity.setOrderNumber(cursor.getString(offset + 0));
        entity.setProgressStatus((byte) cursor.getShort(offset + 1));
        entity.setTime(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
     }
    
    @Override
    protected final Void updateKeyAfterInsert(MaintenanceOrderProgressBean entity, long rowId) {
        // Unsupported or missing PK type
        return null;
    }
    
    @Override
    public Void getKey(MaintenanceOrderProgressBean entity) {
        return null;
    }

    @Override
    public boolean hasKey(MaintenanceOrderProgressBean entity) {
        // TODO
        return false;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
    /** Internal query to resolve the "maintenanceOrderProgresBeen" to-many relationship of MaintenanceOrderInfoBean. */
    public List<MaintenanceOrderProgressBean> _queryMaintenanceOrderInfoBean_MaintenanceOrderProgresBeen(String orderNumber) {
        synchronized (this) {
            if (maintenanceOrderInfoBean_MaintenanceOrderProgresBeenQuery == null) {
                QueryBuilder<MaintenanceOrderProgressBean> queryBuilder = queryBuilder();
                queryBuilder.where(Properties.OrderNumber.eq(null));
                maintenanceOrderInfoBean_MaintenanceOrderProgresBeenQuery = queryBuilder.build();
            }
        }
        Query<MaintenanceOrderProgressBean> query = maintenanceOrderInfoBean_MaintenanceOrderProgresBeenQuery.forCurrentThread();
        query.setParameter(0, orderNumber);
        return query.list();
    }

}
