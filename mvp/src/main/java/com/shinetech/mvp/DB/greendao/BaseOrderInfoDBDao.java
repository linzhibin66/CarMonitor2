package com.shinetech.mvp.DB.greendao;

import java.util.List;
import java.util.ArrayList;
import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.SqlUtils;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

import com.shinetech.mvp.DB.bean.CreateMaintenanceInfoDB;

import com.shinetech.mvp.DB.bean.BaseOrderInfoDB;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "BASE_ORDER_INFO_DB".
*/
public class BaseOrderInfoDBDao extends AbstractDao<BaseOrderInfoDB, Long> {

    public static final String TABLENAME = "BASE_ORDER_INFO_DB";

    /**
     * Properties of entity BaseOrderInfoDB.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property UserName = new Property(1, String.class, "userName", false, "USER_NAME");
        public final static Property OrderName = new Property(2, String.class, "orderName", false, "ORDER_NAME");
        public final static Property OrderNumber = new Property(3, String.class, "orderNumber", false, "ORDER_NUMBER");
        public final static Property OrderStatus = new Property(4, byte.class, "orderStatus", false, "ORDER_STATUS");
        public final static Property ClienteleName = new Property(5, String.class, "clienteleName", false, "CLIENTELE_NAME");
        public final static Property ClientelePhone = new Property(6, String.class, "clientelePhone", false, "CLIENTELE_PHONE");
        public final static Property Founder = new Property(7, String.class, "founder", false, "FOUNDER");
        public final static Property DataInfoId = new Property(8, long.class, "dataInfoId", false, "DATA_INFO_ID");
    }

    private DaoSession daoSession;


    public BaseOrderInfoDBDao(DaoConfig config) {
        super(config);
    }
    
    public BaseOrderInfoDBDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
        this.daoSession = daoSession;
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"BASE_ORDER_INFO_DB\" (" + //
                "\"_id\" INTEGER PRIMARY KEY UNIQUE ," + // 0: id
                "\"USER_NAME\" TEXT," + // 1: userName
                "\"ORDER_NAME\" TEXT," + // 2: orderName
                "\"ORDER_NUMBER\" TEXT," + // 3: orderNumber
                "\"ORDER_STATUS\" INTEGER NOT NULL ," + // 4: orderStatus
                "\"CLIENTELE_NAME\" TEXT," + // 5: clienteleName
                "\"CLIENTELE_PHONE\" TEXT," + // 6: clientelePhone
                "\"FOUNDER\" TEXT," + // 7: founder
                "\"DATA_INFO_ID\" INTEGER NOT NULL );"); // 8: dataInfoId
        // Add Indexes
        db.execSQL("CREATE INDEX " + constraint + "IDX_BASE_ORDER_INFO_DB_ORDER_NUMBER_DESC ON \"BASE_ORDER_INFO_DB\"" +
                " (\"ORDER_NUMBER\" DESC);");
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"BASE_ORDER_INFO_DB\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, BaseOrderInfoDB entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        String userName = entity.getUserName();
        if (userName != null) {
            stmt.bindString(2, userName);
        }
 
        String orderName = entity.getOrderName();
        if (orderName != null) {
            stmt.bindString(3, orderName);
        }
 
        String orderNumber = entity.getOrderNumber();
        if (orderNumber != null) {
            stmt.bindString(4, orderNumber);
        }
        stmt.bindLong(5, entity.getOrderStatus());
 
        String clienteleName = entity.getClienteleName();
        if (clienteleName != null) {
            stmt.bindString(6, clienteleName);
        }
 
        String clientelePhone = entity.getClientelePhone();
        if (clientelePhone != null) {
            stmt.bindString(7, clientelePhone);
        }
 
        String founder = entity.getFounder();
        if (founder != null) {
            stmt.bindString(8, founder);
        }
        stmt.bindLong(9, entity.getDataInfoId());
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, BaseOrderInfoDB entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        String userName = entity.getUserName();
        if (userName != null) {
            stmt.bindString(2, userName);
        }
 
        String orderName = entity.getOrderName();
        if (orderName != null) {
            stmt.bindString(3, orderName);
        }
 
        String orderNumber = entity.getOrderNumber();
        if (orderNumber != null) {
            stmt.bindString(4, orderNumber);
        }
        stmt.bindLong(5, entity.getOrderStatus());
 
        String clienteleName = entity.getClienteleName();
        if (clienteleName != null) {
            stmt.bindString(6, clienteleName);
        }
 
        String clientelePhone = entity.getClientelePhone();
        if (clientelePhone != null) {
            stmt.bindString(7, clientelePhone);
        }
 
        String founder = entity.getFounder();
        if (founder != null) {
            stmt.bindString(8, founder);
        }
        stmt.bindLong(9, entity.getDataInfoId());
    }

    @Override
    protected final void attachEntity(BaseOrderInfoDB entity) {
        super.attachEntity(entity);
        entity.__setDaoSession(daoSession);
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    @Override
    public BaseOrderInfoDB readEntity(Cursor cursor, int offset) {
        BaseOrderInfoDB entity = new BaseOrderInfoDB( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // userName
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // orderName
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // orderNumber
            (byte) cursor.getShort(offset + 4), // orderStatus
            cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5), // clienteleName
            cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6), // clientelePhone
            cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7), // founder
            cursor.getLong(offset + 8) // dataInfoId
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, BaseOrderInfoDB entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setUserName(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setOrderName(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setOrderNumber(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setOrderStatus((byte) cursor.getShort(offset + 4));
        entity.setClienteleName(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
        entity.setClientelePhone(cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6));
        entity.setFounder(cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7));
        entity.setDataInfoId(cursor.getLong(offset + 8));
     }
    
    @Override
    protected final Long updateKeyAfterInsert(BaseOrderInfoDB entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(BaseOrderInfoDB entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(BaseOrderInfoDB entity) {
        return entity.getId() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
    private String selectDeep;

    protected String getSelectDeep() {
        if (selectDeep == null) {
            StringBuilder builder = new StringBuilder("SELECT ");
            SqlUtils.appendColumns(builder, "T", getAllColumns());
            builder.append(',');
            SqlUtils.appendColumns(builder, "T0", daoSession.getCreateMaintenanceInfoDBDao().getAllColumns());
            builder.append(" FROM BASE_ORDER_INFO_DB T");
            builder.append(" LEFT JOIN CREATE_MAINTENANCE_INFO_DB T0 ON T.\"DATA_INFO_ID\"=T0.\"_id\"");
            builder.append(' ');
            selectDeep = builder.toString();
        }
        return selectDeep;
    }
    
    protected BaseOrderInfoDB loadCurrentDeep(Cursor cursor, boolean lock) {
        BaseOrderInfoDB entity = loadCurrent(cursor, 0, lock);
        int offset = getAllColumns().length;

        CreateMaintenanceInfoDB data = loadCurrentOther(daoSession.getCreateMaintenanceInfoDBDao(), cursor, offset);
         if(data != null) {
            entity.setData(data);
        }

        return entity;    
    }

    public BaseOrderInfoDB loadDeep(Long key) {
        assertSinglePk();
        if (key == null) {
            return null;
        }

        StringBuilder builder = new StringBuilder(getSelectDeep());
        builder.append("WHERE ");
        SqlUtils.appendColumnsEqValue(builder, "T", getPkColumns());
        String sql = builder.toString();
        
        String[] keyArray = new String[] { key.toString() };
        Cursor cursor = db.rawQuery(sql, keyArray);
        
        try {
            boolean available = cursor.moveToFirst();
            if (!available) {
                return null;
            } else if (!cursor.isLast()) {
                throw new IllegalStateException("Expected unique result, but count was " + cursor.getCount());
            }
            return loadCurrentDeep(cursor, true);
        } finally {
            cursor.close();
        }
    }
    
    /** Reads all available rows from the given cursor and returns a list of new ImageTO objects. */
    public List<BaseOrderInfoDB> loadAllDeepFromCursor(Cursor cursor) {
        int count = cursor.getCount();
        List<BaseOrderInfoDB> list = new ArrayList<BaseOrderInfoDB>(count);
        
        if (cursor.moveToFirst()) {
            if (identityScope != null) {
                identityScope.lock();
                identityScope.reserveRoom(count);
            }
            try {
                do {
                    list.add(loadCurrentDeep(cursor, false));
                } while (cursor.moveToNext());
            } finally {
                if (identityScope != null) {
                    identityScope.unlock();
                }
            }
        }
        return list;
    }
    
    protected List<BaseOrderInfoDB> loadDeepAllAndCloseCursor(Cursor cursor) {
        try {
            return loadAllDeepFromCursor(cursor);
        } finally {
            cursor.close();
        }
    }
    

    /** A raw-style query where you can pass any WHERE clause and arguments. */
    public List<BaseOrderInfoDB> queryDeep(String where, String... selectionArg) {
        Cursor cursor = db.rawQuery(getSelectDeep() + where, selectionArg);
        return loadDeepAllAndCloseCursor(cursor);
    }
 
}
