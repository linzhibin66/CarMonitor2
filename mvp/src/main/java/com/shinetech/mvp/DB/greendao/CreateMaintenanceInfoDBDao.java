package com.shinetech.mvp.DB.greendao;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

import com.shinetech.mvp.DB.bean.CreateMaintenanceInfoDB;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "CREATE_MAINTENANCE_INFO_DB".
*/
public class CreateMaintenanceInfoDBDao extends AbstractDao<CreateMaintenanceInfoDB, Long> {

    public static final String TABLENAME = "CREATE_MAINTENANCE_INFO_DB";

    /**
     * Properties of entity CreateMaintenanceInfoDB.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property OrderNumber = new Property(1, String.class, "orderNumber", false, "ORDER_NUMBER");
        public final static Property PlateNumber = new Property(2, String.class, "plateNumber", false, "PLATE_NUMBER");
        public final static Property Proposer = new Property(3, String.class, "proposer", false, "PROPOSER");
        public final static Property ContactNumber = new Property(4, String.class, "contactNumber", false, "CONTACT_NUMBER");
        public final static Property RepairTime = new Property(5, String.class, "repairTime", false, "REPAIR_TIME");
        public final static Property AppointmentTime = new Property(6, String.class, "appointmentTime", false, "APPOINTMENT_TIME");
        public final static Property AppointmentLocation = new Property(7, String.class, "appointmentLocation", false, "APPOINTMENT_LOCATION");
        public final static Property ProblemDescription = new Property(8, String.class, "problemDescription", false, "PROBLEM_DESCRIPTION");
        public final static Property PathjsonStr = new Property(9, String.class, "pathjsonStr", false, "PATHJSON_STR");
    }


    public CreateMaintenanceInfoDBDao(DaoConfig config) {
        super(config);
    }
    
    public CreateMaintenanceInfoDBDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"CREATE_MAINTENANCE_INFO_DB\" (" + //
                "\"_id\" INTEGER PRIMARY KEY ," + // 0: id
                "\"ORDER_NUMBER\" TEXT UNIQUE ," + // 1: orderNumber
                "\"PLATE_NUMBER\" TEXT," + // 2: plateNumber
                "\"PROPOSER\" TEXT," + // 3: proposer
                "\"CONTACT_NUMBER\" TEXT," + // 4: contactNumber
                "\"REPAIR_TIME\" TEXT," + // 5: repairTime
                "\"APPOINTMENT_TIME\" TEXT," + // 6: appointmentTime
                "\"APPOINTMENT_LOCATION\" TEXT," + // 7: appointmentLocation
                "\"PROBLEM_DESCRIPTION\" TEXT," + // 8: problemDescription
                "\"PATHJSON_STR\" TEXT);"); // 9: pathjsonStr
        // Add Indexes
        db.execSQL("CREATE UNIQUE INDEX " + constraint + "IDX_CREATE_MAINTENANCE_INFO_DB_ORDER_NUMBER_DESC ON \"CREATE_MAINTENANCE_INFO_DB\"" +
                " (\"ORDER_NUMBER\" DESC);");
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"CREATE_MAINTENANCE_INFO_DB\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, CreateMaintenanceInfoDB entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        String orderNumber = entity.getOrderNumber();
        if (orderNumber != null) {
            stmt.bindString(2, orderNumber);
        }
 
        String plateNumber = entity.getPlateNumber();
        if (plateNumber != null) {
            stmt.bindString(3, plateNumber);
        }
 
        String proposer = entity.getProposer();
        if (proposer != null) {
            stmt.bindString(4, proposer);
        }
 
        String contactNumber = entity.getContactNumber();
        if (contactNumber != null) {
            stmt.bindString(5, contactNumber);
        }
 
        String repairTime = entity.getRepairTime();
        if (repairTime != null) {
            stmt.bindString(6, repairTime);
        }
 
        String appointmentTime = entity.getAppointmentTime();
        if (appointmentTime != null) {
            stmt.bindString(7, appointmentTime);
        }
 
        String appointmentLocation = entity.getAppointmentLocation();
        if (appointmentLocation != null) {
            stmt.bindString(8, appointmentLocation);
        }
 
        String problemDescription = entity.getProblemDescription();
        if (problemDescription != null) {
            stmt.bindString(9, problemDescription);
        }
 
        String pathjsonStr = entity.getPathjsonStr();
        if (pathjsonStr != null) {
            stmt.bindString(10, pathjsonStr);
        }
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, CreateMaintenanceInfoDB entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        String orderNumber = entity.getOrderNumber();
        if (orderNumber != null) {
            stmt.bindString(2, orderNumber);
        }
 
        String plateNumber = entity.getPlateNumber();
        if (plateNumber != null) {
            stmt.bindString(3, plateNumber);
        }
 
        String proposer = entity.getProposer();
        if (proposer != null) {
            stmt.bindString(4, proposer);
        }
 
        String contactNumber = entity.getContactNumber();
        if (contactNumber != null) {
            stmt.bindString(5, contactNumber);
        }
 
        String repairTime = entity.getRepairTime();
        if (repairTime != null) {
            stmt.bindString(6, repairTime);
        }
 
        String appointmentTime = entity.getAppointmentTime();
        if (appointmentTime != null) {
            stmt.bindString(7, appointmentTime);
        }
 
        String appointmentLocation = entity.getAppointmentLocation();
        if (appointmentLocation != null) {
            stmt.bindString(8, appointmentLocation);
        }
 
        String problemDescription = entity.getProblemDescription();
        if (problemDescription != null) {
            stmt.bindString(9, problemDescription);
        }
 
        String pathjsonStr = entity.getPathjsonStr();
        if (pathjsonStr != null) {
            stmt.bindString(10, pathjsonStr);
        }
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    @Override
    public CreateMaintenanceInfoDB readEntity(Cursor cursor, int offset) {
        CreateMaintenanceInfoDB entity = new CreateMaintenanceInfoDB( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // orderNumber
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // plateNumber
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // proposer
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // contactNumber
            cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5), // repairTime
            cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6), // appointmentTime
            cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7), // appointmentLocation
            cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8), // problemDescription
            cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9) // pathjsonStr
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, CreateMaintenanceInfoDB entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setOrderNumber(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setPlateNumber(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setProposer(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setContactNumber(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setRepairTime(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
        entity.setAppointmentTime(cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6));
        entity.setAppointmentLocation(cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7));
        entity.setProblemDescription(cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8));
        entity.setPathjsonStr(cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9));
     }
    
    @Override
    protected final Long updateKeyAfterInsert(CreateMaintenanceInfoDB entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(CreateMaintenanceInfoDB entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(CreateMaintenanceInfoDB entity) {
        return entity.getId() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
