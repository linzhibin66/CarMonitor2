package com.shinetech.mvp.DB.greendao;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

import com.shinetech.mvp.DB.bean.InstallOrderBaseInfo;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "INSTALL_ORDER_BASE_INFO".
*/
public class InstallOrderBaseInfoDao extends AbstractDao<InstallOrderBaseInfo, Long> {

    public static final String TABLENAME = "INSTALL_ORDER_BASE_INFO";

    /**
     * Properties of entity InstallOrderBaseInfo.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property OrderStatus = new Property(1, int.class, "orderStatus", false, "ORDER_STATUS");
        public final static Property OrderNumber = new Property(2, String.class, "orderNumber", false, "ORDER_NUMBER");
        public final static Property UserName = new Property(3, String.class, "userName", false, "USER_NAME");
        public final static Property InstallLocation = new Property(4, String.class, "installLocation", false, "INSTALL_LOCATION");
        public final static Property InstallType = new Property(5, short.class, "installType", false, "INSTALL_TYPE");
        public final static Property InstallCount = new Property(6, int.class, "installCount", false, "INSTALL_COUNT");
        public final static Property Contacts = new Property(7, String.class, "contacts", false, "CONTACTS");
        public final static Property FinishTime = new Property(8, String.class, "finishTime", false, "FINISH_TIME");
    }

    private DaoSession daoSession;


    public InstallOrderBaseInfoDao(DaoConfig config) {
        super(config);
    }
    
    public InstallOrderBaseInfoDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
        this.daoSession = daoSession;
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"INSTALL_ORDER_BASE_INFO\" (" + //
                "\"_id\" INTEGER PRIMARY KEY AUTOINCREMENT ," + // 0: id
                "\"ORDER_STATUS\" INTEGER NOT NULL ," + // 1: orderStatus
                "\"ORDER_NUMBER\" TEXT UNIQUE ," + // 2: orderNumber
                "\"USER_NAME\" TEXT," + // 3: userName
                "\"INSTALL_LOCATION\" TEXT," + // 4: installLocation
                "\"INSTALL_TYPE\" INTEGER NOT NULL ," + // 5: installType
                "\"INSTALL_COUNT\" INTEGER NOT NULL ," + // 6: installCount
                "\"CONTACTS\" TEXT," + // 7: contacts
                "\"FINISH_TIME\" TEXT);"); // 8: finishTime
        // Add Indexes
        db.execSQL("CREATE UNIQUE INDEX " + constraint + "IDX_INSTALL_ORDER_BASE_INFO__id_DESC ON \"INSTALL_ORDER_BASE_INFO\"" +
                " (\"_id\" DESC);");
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"INSTALL_ORDER_BASE_INFO\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, InstallOrderBaseInfo entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
        stmt.bindLong(2, entity.getOrderStatus());
 
        String orderNumber = entity.getOrderNumber();
        if (orderNumber != null) {
            stmt.bindString(3, orderNumber);
        }
 
        String userName = entity.getUserName();
        if (userName != null) {
            stmt.bindString(4, userName);
        }
 
        String installLocation = entity.getInstallLocation();
        if (installLocation != null) {
            stmt.bindString(5, installLocation);
        }
        stmt.bindLong(6, entity.getInstallType());
        stmt.bindLong(7, entity.getInstallCount());
 
        String contacts = entity.getContacts();
        if (contacts != null) {
            stmt.bindString(8, contacts);
        }
 
        String finishTime = entity.getFinishTime();
        if (finishTime != null) {
            stmt.bindString(9, finishTime);
        }
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, InstallOrderBaseInfo entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
        stmt.bindLong(2, entity.getOrderStatus());
 
        String orderNumber = entity.getOrderNumber();
        if (orderNumber != null) {
            stmt.bindString(3, orderNumber);
        }
 
        String userName = entity.getUserName();
        if (userName != null) {
            stmt.bindString(4, userName);
        }
 
        String installLocation = entity.getInstallLocation();
        if (installLocation != null) {
            stmt.bindString(5, installLocation);
        }
        stmt.bindLong(6, entity.getInstallType());
        stmt.bindLong(7, entity.getInstallCount());
 
        String contacts = entity.getContacts();
        if (contacts != null) {
            stmt.bindString(8, contacts);
        }
 
        String finishTime = entity.getFinishTime();
        if (finishTime != null) {
            stmt.bindString(9, finishTime);
        }
    }

    @Override
    protected final void attachEntity(InstallOrderBaseInfo entity) {
        super.attachEntity(entity);
        entity.__setDaoSession(daoSession);
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    @Override
    public InstallOrderBaseInfo readEntity(Cursor cursor, int offset) {
        InstallOrderBaseInfo entity = new InstallOrderBaseInfo( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.getInt(offset + 1), // orderStatus
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // orderNumber
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // userName
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // installLocation
            cursor.getShort(offset + 5), // installType
            cursor.getInt(offset + 6), // installCount
            cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7), // contacts
            cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8) // finishTime
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, InstallOrderBaseInfo entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setOrderStatus(cursor.getInt(offset + 1));
        entity.setOrderNumber(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setUserName(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setInstallLocation(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setInstallType(cursor.getShort(offset + 5));
        entity.setInstallCount(cursor.getInt(offset + 6));
        entity.setContacts(cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7));
        entity.setFinishTime(cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8));
     }
    
    @Override
    protected final Long updateKeyAfterInsert(InstallOrderBaseInfo entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(InstallOrderBaseInfo entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(InstallOrderBaseInfo entity) {
        return entity.getId() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
