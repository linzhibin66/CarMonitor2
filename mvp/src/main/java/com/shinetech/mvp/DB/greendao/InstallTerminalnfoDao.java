package com.shinetech.mvp.DB.greendao;

import java.util.List;
import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;
import org.greenrobot.greendao.query.Query;
import org.greenrobot.greendao.query.QueryBuilder;

import com.shinetech.mvp.DB.bean.InstallTerminalnfo;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "INSTALL_TERMINALNFO".
*/
public class InstallTerminalnfoDao extends AbstractDao<InstallTerminalnfo, Long> {

    public static final String TABLENAME = "INSTALL_TERMINALNFO";

    /**
     * Properties of entity InstallTerminalnfo.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property OrderNumber = new Property(1, String.class, "orderNumber", false, "ORDER_NUMBER");
        public final static Property Vin = new Property(2, String.class, "vin", false, "VIN");
        public final static Property PlateNumber = new Property(3, String.class, "plateNumber", false, "PLATE_NUMBER");
        public final static Property TerminalType = new Property(4, String.class, "terminalType", false, "TERMINAL_TYPE");
        public final static Property TerminalID = new Property(5, String.class, "terminalID", false, "TERMINAL_ID");
        public final static Property SimCard = new Property(6, String.class, "simCard", false, "SIM_CARD");
        public final static Property InstallTime = new Property(7, String.class, "installTime", false, "INSTALL_TIME");
        public final static Property DeviceStatus = new Property(8, String.class, "deviceStatus", false, "DEVICE_STATUS");
        public final static Property InstallationPersonnel = new Property(9, String.class, "installationPersonnel", false, "INSTALLATION_PERSONNEL");
        public final static Property PathjsonStr = new Property(10, String.class, "pathjsonStr", false, "PATHJSON_STR");
    }

    private Query<InstallTerminalnfo> installOrderBaseInfo_TerminallistQuery;

    public InstallTerminalnfoDao(DaoConfig config) {
        super(config);
    }
    
    public InstallTerminalnfoDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"INSTALL_TERMINALNFO\" (" + //
                "\"_id\" INTEGER PRIMARY KEY UNIQUE ," + // 0: id
                "\"ORDER_NUMBER\" TEXT NOT NULL ," + // 1: orderNumber
                "\"VIN\" TEXT," + // 2: vin
                "\"PLATE_NUMBER\" TEXT," + // 3: plateNumber
                "\"TERMINAL_TYPE\" TEXT," + // 4: terminalType
                "\"TERMINAL_ID\" TEXT," + // 5: terminalID
                "\"SIM_CARD\" TEXT," + // 6: simCard
                "\"INSTALL_TIME\" TEXT," + // 7: installTime
                "\"DEVICE_STATUS\" TEXT," + // 8: deviceStatus
                "\"INSTALLATION_PERSONNEL\" TEXT," + // 9: installationPersonnel
                "\"PATHJSON_STR\" TEXT);"); // 10: pathjsonStr
        // Add Indexes
        db.execSQL("CREATE UNIQUE INDEX " + constraint + "IDX_INSTALL_TERMINALNFO__id_DESC ON \"INSTALL_TERMINALNFO\"" +
                " (\"_id\" DESC);");
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"INSTALL_TERMINALNFO\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, InstallTerminalnfo entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
        stmt.bindString(2, entity.getOrderNumber());
 
        String vin = entity.getVin();
        if (vin != null) {
            stmt.bindString(3, vin);
        }
 
        String plateNumber = entity.getPlateNumber();
        if (plateNumber != null) {
            stmt.bindString(4, plateNumber);
        }
 
        String terminalType = entity.getTerminalType();
        if (terminalType != null) {
            stmt.bindString(5, terminalType);
        }
 
        String terminalID = entity.getTerminalID();
        if (terminalID != null) {
            stmt.bindString(6, terminalID);
        }
 
        String simCard = entity.getSimCard();
        if (simCard != null) {
            stmt.bindString(7, simCard);
        }
 
        String installTime = entity.getInstallTime();
        if (installTime != null) {
            stmt.bindString(8, installTime);
        }
 
        String deviceStatus = entity.getDeviceStatus();
        if (deviceStatus != null) {
            stmt.bindString(9, deviceStatus);
        }
 
        String installationPersonnel = entity.getInstallationPersonnel();
        if (installationPersonnel != null) {
            stmt.bindString(10, installationPersonnel);
        }
 
        String pathjsonStr = entity.getPathjsonStr();
        if (pathjsonStr != null) {
            stmt.bindString(11, pathjsonStr);
        }
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, InstallTerminalnfo entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
        stmt.bindString(2, entity.getOrderNumber());
 
        String vin = entity.getVin();
        if (vin != null) {
            stmt.bindString(3, vin);
        }
 
        String plateNumber = entity.getPlateNumber();
        if (plateNumber != null) {
            stmt.bindString(4, plateNumber);
        }
 
        String terminalType = entity.getTerminalType();
        if (terminalType != null) {
            stmt.bindString(5, terminalType);
        }
 
        String terminalID = entity.getTerminalID();
        if (terminalID != null) {
            stmt.bindString(6, terminalID);
        }
 
        String simCard = entity.getSimCard();
        if (simCard != null) {
            stmt.bindString(7, simCard);
        }
 
        String installTime = entity.getInstallTime();
        if (installTime != null) {
            stmt.bindString(8, installTime);
        }
 
        String deviceStatus = entity.getDeviceStatus();
        if (deviceStatus != null) {
            stmt.bindString(9, deviceStatus);
        }
 
        String installationPersonnel = entity.getInstallationPersonnel();
        if (installationPersonnel != null) {
            stmt.bindString(10, installationPersonnel);
        }
 
        String pathjsonStr = entity.getPathjsonStr();
        if (pathjsonStr != null) {
            stmt.bindString(11, pathjsonStr);
        }
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    @Override
    public InstallTerminalnfo readEntity(Cursor cursor, int offset) {
        InstallTerminalnfo entity = new InstallTerminalnfo( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.getString(offset + 1), // orderNumber
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // vin
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // plateNumber
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // terminalType
            cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5), // terminalID
            cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6), // simCard
            cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7), // installTime
            cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8), // deviceStatus
            cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9), // installationPersonnel
            cursor.isNull(offset + 10) ? null : cursor.getString(offset + 10) // pathjsonStr
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, InstallTerminalnfo entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setOrderNumber(cursor.getString(offset + 1));
        entity.setVin(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setPlateNumber(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setTerminalType(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setTerminalID(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
        entity.setSimCard(cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6));
        entity.setInstallTime(cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7));
        entity.setDeviceStatus(cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8));
        entity.setInstallationPersonnel(cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9));
        entity.setPathjsonStr(cursor.isNull(offset + 10) ? null : cursor.getString(offset + 10));
     }
    
    @Override
    protected final Long updateKeyAfterInsert(InstallTerminalnfo entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(InstallTerminalnfo entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(InstallTerminalnfo entity) {
        return entity.getId() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
    /** Internal query to resolve the "terminallist" to-many relationship of InstallOrderBaseInfo. */
    public List<InstallTerminalnfo> _queryInstallOrderBaseInfo_Terminallist(String orderNumber) {
        synchronized (this) {
            if (installOrderBaseInfo_TerminallistQuery == null) {
                QueryBuilder<InstallTerminalnfo> queryBuilder = queryBuilder();
                queryBuilder.where(Properties.OrderNumber.eq(null));
                installOrderBaseInfo_TerminallistQuery = queryBuilder.build();
            }
        }
        Query<InstallTerminalnfo> query = installOrderBaseInfo_TerminallistQuery.forCurrentThread();
        query.setParameter(0, orderNumber);
        return query.list();
    }

}
